name: Release

on:
  workflow_dispatch:

jobs:
  create-release:
    runs-on: ubuntu-20.04
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      revision: ${{ steps.revision.outputs.revision }}
    steps:
      - id: release
        uses: release-drafter/release-drafter@v5.22.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - id: revision
        run: echo "revision=$(echo '${{ steps.release.outputs.tag_name }}' | cut -c2-)" >> $GITHUB_OUTPUT
  build:
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      matrix:
        os: [ macos-latest, windows-latest, ubuntu-20.04 ]
        include:
          - os: ubuntu-20.04
            cli_assembly_id: linux-amd64
            cli_assembly_format: tar.gz
          - os: windows-latest
            cli_assembly_id: windows-amd64
            cli_assembly_format: zip
            gu_executable_ext: .cmd
          - os: macos-latest
            cli_assembly_id: macos-amd64
            cli_assembly_format: tar.gz
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
        if: ${{ matrix.os == 'windows-latest'}}
      - run: ldd --version
        if: ${{ matrix.os == 'ubuntu-20.04'}}
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - uses: Project-Env/project-env-github-action@v1.3.1
      - uses: repolevedavaj/install-nsis@v1.0.0
        with:
          nsis-version: 3.08
        if: ${{ matrix.os == 'windows-latest'}}
      - run: mvn -B -s etc/m2/settings-ci.xml package -Pnative-image "-Drevision=${{ needs.create-release.outputs.revision }}" "-Dcli.assembly.id=${{ matrix.cli_assembly_id }}" "-Dcli.assembly.format=${{ matrix.cli_assembly_format }}"
        env:
          GITHUB_USER: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: repolevedavaj/create-cli-app-nsis-installer@main
        if: ${{ matrix.os == 'windows-latest'}}
        with:
          package-identifier: ProjectEnv.ProjectEnvCli
          package-name: Project-Env Cli
          package-version: ${{ needs.create-release.outputs.revision }}
          source-directory: code/cli/target/cli-${{ needs.create-release.outputs.revision }}-${{ matrix.cli_assembly_id }}
      - name: Sign and notarize executable
        if: ${{ matrix.os == 'macos-latest'}}
        run: ../../../etc/github-actions/sign-and-notarize-executable.sh
        working-directory: code/cli/target
        env:
          EXECUTABLE_NAME: project-env-cli
          EXECUTABLE_PACKAGE_NAME: cli-${{ needs.create-release.outputs.revision }}-${{ matrix.cli_assembly_id }}.${{ matrix.cli_assembly_format }}
          EXECUTABLE_ID: io.projectenv.core.cli
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_ID_TEAM: ${{ secrets.APPLE_ID_TEAM }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_IDENTITY: ${{ secrets.APPLE_IDENTITY }}
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: code/cli/target/cli-${{ needs.create-release.outputs.revision }}-${{ matrix.cli_assembly_id }}.${{ matrix.cli_assembly_format }}
          asset_name: cli-${{ needs.create-release.outputs.revision }}-${{ matrix.cli_assembly_id }}.${{ matrix.cli_assembly_format }}
          asset_content_type: application/octet-stream
      - uses: actions/upload-release-asset@v1
        if: ${{ matrix.os == 'windows-latest'}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: code/cli/target/cli-${{ needs.create-release.outputs.revision }}-${{ matrix.cli_assembly_id }}-setup.exe
          asset_name: cli-${{ needs.create-release.outputs.revision }}-${{ matrix.cli_assembly_id }}-setup.exe
          asset_content_type: application/octet-stream
